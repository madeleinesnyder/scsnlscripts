function apply_ensure(jobname, gridfun, paths, ON_GRID, cores, n_runs,opts)
jdir = jobdir(jobname);
fprintf('Running apply-ensure\n');
pigs = get_farm_jobs(jobname);
hrs = find([pigs.runs] < n_runs & ~[pigs.submitted]);
% make all .m, .sh files.
paths{end+1} = jdir;  
paths{end+1} = fileparts(mfilename('fullpath'));


for a=1:length(pigs),
    % make the .m file.
    tqfun = sprintf('torquefun_%g',a);
    fname = sprintf('%s/%s.m',jdir,tqfun);
    fm = fopen(fname,'w');
    s = [
    sprintf('function %s()\n',tqfun), ...
    'pwd()\n', ...
    ];
    for ds=paths,
        s = [s, sprintf('addpath(''%s'');\n',ds{1})];
    end    
    rsreset = 'reset(RandStream.getGlobalStream, mod(tic(), 100000000));\n';
    if strcmp(version('-release'), '2009a'),
        rsreset = 'RandStream.setDefaultStream(RandStream(''mt19937ar'',''seed'',sum(100*clock)));\n';
    end
    s = [s, ...
        sprintf('pig = load(''%s'');\n', pigs(a).name),...
    'pig.submitted = true;\n', ...
    'save_pig(pig);\n', ...
    'farm_print(pig.name, ''torquefun.m called'');\n', ...
    'load(pig.parfile);\n', ...
    rsreset, ...
    'rand()\n', ...
    't0 = tic();\n']; %sprintf('maxNumCompThreads(%g);\n', cores)
    s = [s, ...
    'disp(''NumCompThreads()'');\n maxNumCompThreads(),\n', ...
    sprintf('par = %s(par, pig);\n',gridfun),...    
    'save(pig.parfile, ''par'');\n',...
    'toc(t0);\n', ...
    'pig.com.t = tic();\n',...
    'pig.com.message = ''torquefun.m stopped'';\n',...
    'pig.runs = pig.runs+1;\n',...
    'pig.submitted = false;\n',...
    'save_pig(pig);\n',...
    'end\n',...
    ];
    fprintf(fm,s);
    fclose(fm);
    %sprintf('maxNumCompThreads(%g);\n', cores), ...
% # embedded options to qsub - start with #$
% # -- our name ---
% #PBS -N Matlab
% #PBS -q hpc
% #PBS -l nodes=1:ppn=8 
% # -- run in the current working (submission) directory --
% cd $PBS_O_WORKDIR
% 
% # here follow the commands you want to execute
% #
% matlab -nodisplay -r torquejob -logfile outputfile
    
    cur_cores = cores; 
%     pigs(a)
    if isfield(pigs(a), 'ppn'),
        cur_cores = pigs(a).ppn;
%         disp('ppn field');
    else
%         disp('no ppn field');
    end 
    shname = sprintf('%s/torquesub_%g.sh',jdir,a);
    if ~opts.stanford,
        mk_submit_file_qsub(shname,a,gridfun,tqfun, opts,cur_cores)
    else
        mk_submit_file_slurm(shname,a,gridfun,tqfun, opts,cur_cores)        
    end
    if false,
    fm = fopen(shname,'w');
    s = [
    '#!/bin/sh\n',...
    sprintf('#PBS -N th.%s.%g\n',gridfun,a),...
    sprintf('#PBS -q %s\n',opts.que), ...
    sprintf('#PBS -l walltime=%i:00:00\n',opts.walltime), ...
    sprintf('#PBS -l nodes=1:ppn=%g\n',cur_cores), ...
    'cd $PBS_O_WORKDIR\n', ...
    'echo $PBS_O_WORKDIR\n', ...
    'pwd\n', ...
    sprintf('matlab%s -nodesktop -r %s -logfile outputfile%g\n',opts.matlab_version, tqfun,a)
    ];    
    fprintf(fm,s);
    fclose(fm);
    end
    
end 
fprintf('Finished preparing: %g jobs\n', length(hrs));    
if nnz(hrs) == 0, return; end
if ON_GRID,
    
else 
    addpath(jdir);
    for a=hrs,
        eval(sprintf('torquefun_%i', a));
    end    
end 
end

function mk_submit_file_qsub(shname,a,gridfun,tqfun, opts,cur_cores)
%shname = sprintf('%s/torquesub_%g.sh',jdir,a);
    fm = fopen(shname,'w');
    s = [
    '#!/bin/sh\n',...
    sprintf('#PBS -N th.%s.%g\n',gridfun,a),...
    sprintf('#PBS -q %s\n',opts.que), ...
    sprintf('#PBS -l walltime=%i:00:00\n',opts.walltime), ...
    sprintf('#PBS -l nodes=1:ppn=%g\n',cur_cores), ...
    'cd $PBS_O_WORKDIR\n', ...
    'echo $PBS_O_WORKDIR\n', ...
    'pwd\n', ...
    sprintf('matlab%s -nodesktop -r %s -logfile outputfile%g\n',opts.matlab_version, tqfun,a)
    ];    
    fprintf(fm,s);
    fclose(fm);
    
end

function mk_submit_file_slurm(shname,a,gridfun,tqfun, opts,num_cores)
%shname = sprintf('%s/torquesub_%g.sh',jdir,a);
fm = fopen(shname,'w');
s = [
    '#!/bin/sh\n',...
sprintf('#SBATCH --job-name=th.%s.%g\n',gridfun,a), ...
sprintf('#SBATCH --time=%i:00:00\n',opts.walltime)];
if ~isempty(opts.quos), 
    s  = [s, sprintf('##SBATCH --qos=long\n')];
end

s = [s sprintf('#SBATCH -p %s\n', opts.que), ...
    sprintf('#SBATCH --nodes=%i\n', num_cores), ...
    sprintf('#SBATCH --mem=%i\n', opts.mem), ...
    sprintf('module load matlab\n'), ...
sprintf('matlab -nodesktop -r %s -logfile outputfile%g\n', tqfun,a)];
fprintf(fm,s);
fclose(fm);

%     
% #SBATCH --output=Rtest.%j.out
% #SBATCH --error=Rtest.%j.err
% #format could be dd-hh:mm:ss, hh:mm:ss, mm:ss, or mm
% #SBATCH --time=5:00
% ##SBATCH --qos=long
% #SBATCH -p dev 
% #SBATCH --nodes=1
% #SBATCH --mem=4000
% module load R/3.3.0
% R CMD BATCH  ./rtest.R


% '#!/bin/sh\n',...
% sprintf('#PBS -N th.%s.%g\n',gridfun,a),...
% sprintf('#PBS -q %s\n',opts.que), ...
% sprintf('#PBS -l walltime=%i:00:00\n',opts.walltime), ...
% sprintf('#PBS -l nodes=1:ppn=%g\n',cur_cores), ...
% 'cd $PBS_O_WORKDIR\n', ...
% 'echo $PBS_O_WORKDIR\n', ...
% 'pwd\n', ...
% sprintf('matlab%s -nodesktop -r %s -logfile outputfile%g\n',opts.matlab_version, tqfun,a)
% ];    
% fprintf(fm,s);
% fclose(fm);
    
end

